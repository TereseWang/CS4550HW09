{"ast":null,"code":"var _jsxFileName = \"/media/psf/Home/Desktop/event-spa/web-ui/src/Events/New.js\",\n    _s = $RefreshSig$();\n\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { create_event, fetch_events } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EventsNew() {\n  _s();\n\n  let history = useHistory();\n  const [event, setEvent] = useState({\n    name: \"\",\n    date: \"\",\n    description: \"\"\n  });\n\n  function submit(ev) {\n    ev.preventDefault();\n    console.log(ev);\n    console.log(event);\n    create_event(event).then(resp => {\n      if (resp[\"errors\"]) {\n        console.log(\"errors\", resp.errors);\n      } else {\n        history.push(\"/\");\n        fetch_events();\n      }\n    });\n  }\n\n  function update(field, ev) {\n    let newEvent = Object.assign({}, event);\n    newEvent[field] = ev.target.value;\n    setEvent(newEvent);\n  }\n\n  function updateDate(date) {\n    /*\n    let newEvent = Object.assign({}, event);\n    date = new Date(date);\n    let opts = {year: 'numeric', month: 'numeric', day: 'numeric',\n    hour: 'numeric', minute: 'numeric', second: 'numeric',\n      hour12: false,\n      timeZone: 'America/New_York'};\n    let dateStr = new Intl.DateTimeFormat(\"en-US\", opts).format(date);\n    newEvent[\"date\"] = dateStr\n    */\n    console.log(date);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Event Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            onChange: ev => update(\"name\", ev),\n            value: event.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DateTimePicker, {\n            onChange: date => updateDate(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 4,\n            onChange: ev => update(\"description\", ev),\n            value: event.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Event!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EventsNew, \"/mUPkhkYs8DW5xDbhFchmD/dyXs=\", false, function () {\n  return [useHistory];\n});\n\n_c = EventsNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventsNew\");","map":{"version":3,"sources":["/media/psf/Home/Desktop/event-spa/web-ui/src/Events/New.js"],"names":["Row","Col","Form","Button","useState","useHistory","create_event","fetch_events","EventsNew","history","event","setEvent","name","date","description","submit","ev","preventDefault","console","log","then","resp","errors","push","update","field","newEvent","Object","assign","target","value","updateDate"],"mappings":"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","sourcesContent":["import { Row, Col, Form, Button } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { create_event, fetch_events } from '../api';\n\nexport default function EventsNew() {\n  let history = useHistory();\n  const [event, setEvent] = useState({\n    name: \"\",\n    date: \"\",\n    description: \"\"\n  });\n\n  function submit(ev) {\n    ev.preventDefault();\n    console.log(ev);\n    console.log(event);\n    create_event(event).then((resp) => {\n      if (resp[\"errors\"]) {\n        console.log(\"errors\", resp.errors);\n      }\n      else {\n        history.push(\"/\");\n        fetch_events();\n      }\n    });\n  }\n\n  function update(field, ev) {\n    let newEvent = Object.assign({}, event);\n    newEvent[field] = ev.target.value;\n    setEvent(newEvent);\n  }\n\n  function updateDate(date) {\n    /*\n    let newEvent = Object.assign({}, event);\n    date = new Date(date);\n    let opts = {year: 'numeric', month: 'numeric', day: 'numeric',\n\t\t\thour: 'numeric', minute: 'numeric', second: 'numeric',\n      hour12: false,\n      timeZone: 'America/New_York'};\n\t\tlet dateStr = new Intl.DateTimeFormat(\"en-US\", opts).format(date);\n    newEvent[\"date\"] = dateStr\n    */\n    console.log(date)\n  }\n\n\n  return (\n    <Row>\n      <Col>\n        <Form onSubmit={submit}>\n          <Form.Group>\n            <Form.Label>Event Name</Form.Label>\n            <Form.Control type=\"text\"\n              onChange={\n                (ev) => update(\"name\", ev)}\n              value={event.name} />\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Date</Form.Label>\n            <DateTimePicker\n              onChange={\n                (date) => updateDate(date)\n              }/>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Description</Form.Label>\n            <Form.Control as=\"textarea\"\n                          rows={4}\n                          onChange={\n                            (ev) => update(\"description\", ev)\n                          }\n                          value={event.description} />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Event!\n          </Button>\n        </Form>\n      </Col>\n    </Row>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}