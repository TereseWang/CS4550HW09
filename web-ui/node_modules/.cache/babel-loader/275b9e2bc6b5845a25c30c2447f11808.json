{"ast":null,"code":"import store from './store'; //referenced from lecture code SPA Structure from Nat Tuck CS4550 Northeastern University\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n  api_get(\"/users\").then(data => store.dispatch({\n    type: 'users/set',\n    data: data\n  }));\n}\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then(data => store.dispatch({\n    type: 'user_form/set',\n    data: data\n  }));\n}\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport function fetch_events() {\n  api_get(\"/events\").then(data => {\n    store.dispatch({\n      type: 'events/set',\n      data: data\n    });\n  });\n}\nexport function fetch_event(id) {\n  api_get(\"/events/\" + id).then(data => store.dispatch({\n    type: 'event_form/set',\n    data: data\n  }));\n}\nexport async function create_event(event) {\n  let data = new FormData();\n  data.append(\"event[user_id]\", event.user_id);\n  data.append(\"event[date]\", JSON.stringify(event.date));\n  data.append(\"event[description]\", event.description);\n  data.append(\"event[name]\", event.name);\n  let resp = await fetch(\"http://localhost:4000/api/v1/events\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_event(event) {\n  let data = new FormData();\n  data.append(\"event[user_id]\", event.user_id);\n  data.append(\"event[date]\", JSON.stringify(event.date));\n  data.append(\"event[description]\", event.description);\n  data.append(\"event[name]\", event.name);\n  let resp = await fetch(\"http://localhost:4000/api/v1/events/\" + event.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function delete_event(id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/events/\" + id, {\n    method: 'DELETE',\n    body: data\n  }).then(resp => {\n    if (!resp.ok) {\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.'\n      };\n      store.dispatch(action);\n    } else {\n      fetch_events();\n    }\n  });\n}\nexport function fetch_comments(event_id) {\n  api_get(\"/comments\").then(data => {\n    let result = [];\n\n    for (let [key, value] of Object.entries(data)) {\n      if (value.event_id == event_id) {\n        result.push(value);\n      }\n    }\n\n    store.dispatch({\n      type: 'comments/set',\n      data: result\n    });\n  });\n}\nexport async function create_comment(comment, user_id, wellness_id) {\n  let data = new FormData();\n  data.append(\"comment[body]\", comment);\n  data.append(\"comment[health_id]\", wellness_id);\n  data.append(\"comment[user_id]\", user_id);\n  let resp = await fetch(\"http://kittenlover-backend.teresewang.com/api/v1/comments\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function delete_comment(id, wellness_id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://kittenlover-backend.teresewang.com/api/v1/comments/\" + id, {\n    method: 'DELETE',\n    body: data\n  }).then(resp => {\n    if (!resp.ok) {\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.'\n      };\n      store.dispatch(action);\n    } else {\n      console.log(wellness_id);\n      fetch_comments(wellness_id);\n      fetch_wellness();\n    }\n  });\n}\nexport function api_login(email, password) {\n  api_post(\"/session\", {\n    email,\n    password\n  }).then(data => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport function load_defaults() {\n  fetch_users();\n  fetch_events();\n}","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550HW09/web-ui/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_users","then","dispatch","type","fetch_user","id","create_user","user","FormData","append","name","email","password","update_user","fetch_events","fetch_event","create_event","event","user_id","date","description","update_event","delete_event","ok","action","fetch_comments","event_id","result","key","value","Object","entries","push","create_comment","comment","wellness_id","delete_comment","console","log","fetch_wellness","api_login","session","error","load_defaults"],"mappings":"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","sourcesContent":["import store from './store';\n\n//referenced from lecture code SPA Structure from Nat Tuck CS4550 Northeastern University\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then((data) => store.dispatch({\n      type: 'user_form/set',\n      data: data,\n  }));\n}\n\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport function fetch_events() {\n  api_get(\"/events\").then((data) => {\n    store.dispatch({\n    type: 'events/set',\n    data: data,\n  })});\n}\n\nexport function fetch_event(id) {\n  api_get(\"/events/\"+id).then((data) => store.dispatch({\n    type: 'event_form/set',\n    data: data,\n  }));\n}\n\nexport async function create_event(event) {\n  let data = new FormData();\n  data.append(\"event[user_id]\", event.user_id);\n  data.append(\"event[date]\", JSON.stringify(event.date));\n  data.append(\"event[description]\", event.description);\n  data.append(\"event[name]\", event.name);\n  let resp = await fetch(\"http://localhost:4000/api/v1/events\", {\n    method: \"POST\",\n    body: data,\n  })\n  return await resp.json();\n}\n\n\nexport async function update_event(event) {\n  let data = new FormData();\n  data.append(\"event[user_id]\", event.user_id);\n  data.append(\"event[date]\", JSON.stringify(event.date));\n  data.append(\"event[description]\", event.description);\n  data.append(\"event[name]\", event.name);\n  let resp = await fetch(\"http://localhost:4000/api/v1/events/\" + event.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function delete_event(id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://localhost:4000/api/v1/events/\" + id, {\n    method: 'DELETE',\n    body: data,\n  }).then((resp) => {\n    if(!resp.ok){\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.',\n      };\n      store.dispatch(action);\n    }else {\n      fetch_events();\n    }\n  });\n}\n\n\nexport function fetch_comments(event_id) {\n  api_get(\"/comments\").then((data) => {\n    let result = []\n    for (let [key, value] of Object.entries(data)) {\n      if (value.event_id == event_id) {\n        result.push(value)\n      }\n    }\n    store.dispatch({\n    type: 'comments/set',\n    data: result,\n  })})\n}\n\nexport async function create_comment(comment, user_id, wellness_id) {\n  let data = new FormData();\n  data.append(\"comment[body]\", comment);\n  data.append(\"comment[health_id]\", wellness_id);\n  data.append(\"comment[user_id]\", user_id);\n  let resp = await fetch(\"http://kittenlover-backend.teresewang.com/api/v1/comments\", {\n    method: \"POST\",\n    body: data,\n  })\n  return await resp.json();\n}\n\nexport async function delete_comment(id, wellness_id) {\n  let data = new FormData();\n  data.append(\"id\", id);\n  fetch(\"http://kittenlover-backend.teresewang.com/api/v1/comments/\" + id, {\n    method: 'DELETE',\n    body: data,\n  }).then((resp) => {\n    if(!resp.ok){\n      let action = {\n        type: 'error/set',\n        data: 'Unable to delete event.',\n      };\n      store.dispatch(action);\n    }else {\n      console.log(wellness_id)\n      fetch_comments(wellness_id);\n      fetch_wellness()\n    }\n  });\n}\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport function load_defaults() {\n  fetch_users();\n  fetch_events();\n}\n"]},"metadata":{},"sourceType":"module"}