{"ast":null,"code":"import store from './store'; //referenced from lecture code SPA Structure from Nat Tuck CS4550 Northeastern University\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n  api_get(\"/users\").then(data => store.dispatch({\n    type: 'users/set',\n    data: data\n  }));\n}\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then(data => store.dispatch({\n    type: 'user_form/set',\n    data: data\n  }));\n}\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data\n  });\n  return await resp.json();\n}\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://kittenlover-backend.teresewang.com/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data\n  });\n  return await resp.json();\n}\nexport function api_login(email, password) {\n  api_post(\"/session\", {\n    email,\n    password\n  }).then(data => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport function load_defaults() {\n  fetch_users();\n}","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550HW09/web-ui/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_users","then","dispatch","type","fetch_user","id","create_user","user","FormData","append","name","email","password","update_user","reason","photo","api_login","session","action","error","load_defaults"],"mappings":"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","sourcesContent":["import store from './store';\n\n//referenced from lecture code SPA Structure from Nat Tuck CS4550 Northeastern University\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function fetch_user(id) {\n  api_get(\"/users/\" + id).then((data) => store.dispatch({\n      type: 'user_form/set',\n      data: data,\n  }));\n}\n\nexport async function create_user(user) {\n  let data = new FormData();\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  let resp = await fetch(\"http://localhost:4000/api/v1/users\", {\n    method: \"POST\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\nexport async function update_user(user) {\n  let data = new FormData();\n  data.append(\"user_id\", user.id);\n  data.append(\"user[name]\", user.name);\n  data.append(\"user[email]\", user.email);\n  data.append(\"user[password]\", user.password);\n  data.append(\"user[reason]\", user.reason);\n  data.append(\"user[photo]\", user.photo);\n  let resp = await fetch(\"http://kittenlover-backend.teresewang.com/api/v1/users/\" + user.id, {\n    method: \"PATCH\",\n    body: data,\n  })\nreturn await resp.json();\n}\n\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport function load_defaults() {\n  fetch_users();\n}\n"]},"metadata":{},"sourceType":"module"}