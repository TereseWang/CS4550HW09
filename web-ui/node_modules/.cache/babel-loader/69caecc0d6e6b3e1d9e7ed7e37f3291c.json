{"ast":null,"code":"var _jsxFileName = \"/media/psf/Home/Desktop/CS4550HW09/web-ui/src/Event/Edit.js\",\n    _s = $RefreshSig$();\n\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { useState } from 'react';\nimport { useHistory, NavLink, useLocation } from 'react-router-dom';\nimport pick from 'lodash/pick';\nimport store from '../store';\nimport { update_event, fetch_events, fetch_user, fetch_event } from '../api';\nimport Datetime from 'react-datetime';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EventEdit({\n  session,\n  user_form,\n  event_form\n}) {\n  _s();\n\n  let history = useHistory();\n  let location = useLocation();\n  let event_id = location.pathname.split(\"/events/view/\")[1];\n\n  if (typeof event_form.id == \"undefined\" || event_form.id != event_id) {\n    fetch_events();\n    fetch_event(event_id);\n  }\n\n  if (typeof event_form.id == \"undefined\" || user_form.id != event_form.user_id) {\n    fetch_events();\n    fetch_user(event_form.user_id);\n  }\n\n  const [event, setEvent] = useState({\n    user_id: session.user_id,\n    name: \"\",\n    description: \"\",\n    date: \"\",\n    id: event_form.id\n  });\n\n  function onSubmit(ev) {\n    ev.preventDefault();\n    let data = pick(event, ['user_id', 'name', 'description', 'date']);\n    update_event(data).then(data => {\n      if (data.error) {\n        let action = {\n          type: \"error/set\",\n          data: data.error\n        };\n        store.dispatch(action);\n      } else {\n        fetch_events();\n        fetch_users();\n        history.push(\"/\");\n      }\n    });\n  }\n\n  function update(field, ev) {\n    let u1 = Object.assign({}, event);\n    u1[field] = ev.target.value;\n    setEvent(u1);\n  }\n\n  function updateDate(date) {\n    let newEvent = Object.assign({}, event);\n    newEvent[\"date\"] = date;\n    setEvent(newEvent);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"mt-5\",\n        children: \"Edit Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Event Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        onChange: ev => update(\"name\", ev),\n        value: event.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Datetime, {\n        value: event.date,\n        onChange: value => updateDate(value),\n        dateFormat: \"YYYY-MM-DD\",\n        timeFormat: \"HH:mm:SS\",\n        className: \"mb-4 max-width-300\",\n        inputProps: {\n          value: event.date ? moment(event.date).format('MMMM D, YYYY   h:mm a') : ''\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Event Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        onChange: ev => update(\"description\", ev),\n        value: event.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      className: \"h3 font-weight-bold mr-3\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n}\n\n_s(EventEdit, \"Lu7QCt3XQYHStwTEVv/xcLZuEe4=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = EventEdit;\n\nfunction state2props({\n  session,\n  user_form,\n  event_form\n}) {\n  return {\n    session,\n    user_form,\n    event_form\n  };\n}\n\nexport default connect(state2props)(EventEdit);\n\nvar _c;\n\n$RefreshReg$(_c, \"EventEdit\");","map":{"version":3,"sources":["/media/psf/Home/Desktop/CS4550HW09/web-ui/src/Event/Edit.js"],"names":["Row","Col","Form","Button","connect","useState","useHistory","NavLink","useLocation","pick","store","update_event","fetch_events","fetch_user","fetch_event","Datetime","moment","EventEdit","session","user_form","event_form","history","location","event_id","pathname","split","id","user_id","event","setEvent","name","description","date","onSubmit","ev","preventDefault","data","then","error","action","type","dispatch","fetch_users","push","update","field","u1","Object","assign","target","value","updateDate","newEvent","format","state2props"],"mappings":"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","sourcesContent":["import { Row, Col, Form, Button} from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { useState } from 'react';\nimport { useHistory, NavLink, useLocation } from 'react-router-dom';\nimport pick from 'lodash/pick';\nimport store from '../store';\nimport { update_event , fetch_events, fetch_user, fetch_event} from '../api';\nimport Datetime from 'react-datetime';\nimport moment from 'moment';\n\nfunction EventEdit({session, user_form, event_form}) {\n  let history = useHistory();\n  let location = useLocation();\n  let event_id = location.pathname.split(\"/events/view/\")[1]\n\n  if(typeof(event_form.id) == \"undefined\" || event_form.id != event_id) {\n    fetch_events()\n    fetch_event(event_id)\n  }\n\n  if(typeof(event_form.id) == \"undefined\" || user_form.id != event_form.user_id){\n    fetch_events()\n    fetch_user(event_form.user_id)\n  }\n\n  const [event, setEvent] = useState({\n    user_id: session.user_id, name: \"\", description: \"\", date: \"\", id: event_form.id\n  })\n\n  function onSubmit(ev) {\n    ev.preventDefault();\n    let data = pick(event, ['user_id', 'name', 'description', 'date']);\n    update_event(data).then((data) => {\n        if(data.error) {\n          let action={\n            type:\"error/set\",\n            data: data.error\n          }\n          store.dispatch(action)\n        }\n        else {\n          fetch_events()\n          fetch_users()\n          history.push(\"/\")\n        }\n    });\n  }\n\n  function update(field, ev) {\n    let u1 = Object.assign({}, event);\n    u1[field] = ev.target.value;\n    setEvent(u1);\n  }\n\n  function updateDate(date) {\n    let newEvent = Object.assign({}, event);\n    newEvent[\"date\"] = date;\n    setEvent(newEvent);\n  }\n\n  return(\n      <Form onSubmit={onSubmit}>\n        <Form.Group>\n          <h1 className=\"mt-5\">Edit Event</h1>\n          <Form.Label>Event Name</Form.Label>\n          <Form.Control type=\"text\"\n                        onChange={\n                          (ev) => update(\"name\", ev)}\n            value={event.name} />\n        </Form.Group>\n        <Form.Group>\n            <Form.Label>Date</Form.Label>\n            <br></br>\n            <Datetime\n              value={event.date}\n              onChange={(value) => updateDate(value)}\n              dateFormat=\"YYYY-MM-DD\"\n              timeFormat=\"HH:mm:SS\"\n              className=\"mb-4 max-width-300\"\n              inputProps={{\n              value: event.date\n              ? moment(event.date).format('MMMM D, YYYY   h:mm a')\n              : '',\n          }}\n        />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Event Description</Form.Label>\n          <Form.Control type=\"text\"\n                        onChange={\n                          (ev) => update(\"description\", ev)}\n            value={event.description} />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\" className=\"h3 font-weight-bold mr-3\">\n          Save\n        </Button>\n      </Form>\n    );\n}\n\nfunction state2props({session, user_form, event_form}) {\n  return {session, user_form, event_form};\n}\n\nexport default connect(state2props)(EventEdit);\n"]},"metadata":{},"sourceType":"module"}